package display_Sub;

import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import javax.swing.JFrame;

import main.constant;
import control.Control;
import display_Set.display_Set;

public abstract class Sub_Frame extends JFrame implements ActionListener {
	private static final long serialVersionUID = 1L;
	
	private Sub_Panel panel;
	
	public Sub_Frame(Control control, String name, int sub_Width, int sub_Height) {
		
		Class<?> Next_Display = Class.forName(constant.V_Route + state.name());
		panel = (display_Set) Next_Display.newInstance();
		Current_Display.init_View(this, control);
		current_State = state;
		this.add(Current_Display);

		this.setSize(sub_Width, sub_Height);
		this.setLocationRelativeTo(null);
		this.setVisible(true);
		this.setAlwaysOnTop(true);
		this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
	}

	public void paint(Graphics g) {
		this.draw(g);
		this.init_Parts();
	}
	
	public abstract void draw(Graphics g);
	public abstract void init_Parts();


	@Override
	public void actionPerformed(ActionEvent e) {
		invoke(sub_style, e.getActionCommand(), null);
	}

	public static Object invoke(Object obj, String methodName, Object[] parameter) {
		Method[] methods = obj.getClass().getMethods();
		
		for(Method method: methods) {
			if(method.getName().equals(methodName)) {
				try {
					if (method.getReturnType().getName().equals("void")) {
						method.invoke(obj, parameter);        
					} else {
						return method.invoke(obj, parameter);
					}
				} catch(IllegalAccessException | InvocationTargetException e) {}
			}
		}
		return null;
	}
}
