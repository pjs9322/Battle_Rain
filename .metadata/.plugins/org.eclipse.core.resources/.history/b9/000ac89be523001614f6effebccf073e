package host;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Scanner;

public class Server implements Runnable {
	private HashMap<String, DataOutputStream> clients;
	private ServerSocket serverSocket;
	private String myName;

	public Server() {
		clients = new HashMap<String, DataOutputStream>();

		// 여러 스레드에서 접근할 것이므로 동기화
		Collections.synchronizedMap(clients);
	}

	public void start() {
		try {
			Socket socket;

			// 리스너 소켓 생성
			serverSocket = new ServerSocket(7777);
			System.out.println("방이 생성되었습니다.");
			myName = new Scanner(System.in).nextLine();

			Thread myThread = new Thread(this);
			myThread.start();
			// 클라이언트와 연결되면
			while (true) {
				// 통신 소켓을 생성하고 스레드 생성(소켓은 1:1로만 연결된다)
				socket = serverSocket.accept();
				ServerReceiver receiver = new ServerReceiver(socket);
				receiver.start();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		String msg = "";
		msg = sc.nextLine();
		sendToAll("[" + myName + "]" + msg);
	}


	public void sendToAll(String message) {
		Iterator<String> it = clients.keySet().iterator();

		while (it.hasNext()) {
			try {
				DataOutputStream dos = clients.get(it.next());
				dos.writeUTF(message);
				System.out.println(message);
			} catch (Exception e) {
			}
		}
	}


	class ServerReceiver extends Thread {
		Socket socket;
		DataInputStream input;
		DataOutputStream output;

		public ServerReceiver(Socket socket) {
			this.socket = socket;
			try {
				input = new DataInputStream(socket.getInputStream());
				output = new DataOutputStream(socket.getOutputStream());
			} catch (IOException e) {
			}
		}

		@Override
		public void run() {
			String name = "";
			try {
				// 클라이언트가 서버에 접속하면 대화방에 알린다.
				name = input.readUTF();
				sendToAll("#" + name + "[" + socket.getInetAddress() + ":"
						+ socket.getPort() + "]" + "님이 대화방에 접속하였습니다.");

				clients.put(name, output);
				sendToAll(name + "[" + socket.getInetAddress() + ":"
						+ socket.getPort() + "]" + "님이 대화방에 접속하였습니다.");
				sendToAll("현재 " + (clients.size()+1) + "명이 대화방에 접속 중입니다.");

				// 메세지 전송
				while (input != null) {
					sendToAll(input.readUTF());
				}
			} catch (IOException e) {
			} finally {
				// 접속이 종료되면
				clients.remove(name);
				sendToAll("#" + name + "[" + socket.getInetAddress() + ":"
						+ socket.getPort() + "]" + "님이 대화방에서 나갔습니다.");
				sendToAll(name + "[" + socket.getInetAddress() + ":"
						+ socket.getPort() + "]" + "님이 대화방에서 나갔습니다.");
				sendToAll("현재 " + (clients.size()+1) + "명이 대화방에 접속 중입니다.");
			}
		}
	}

}