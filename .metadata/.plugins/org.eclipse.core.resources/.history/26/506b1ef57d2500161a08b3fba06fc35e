package display_Set;

import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.im.InputContext;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JTextField;
import javax.swing.KeyStroke;

import main.constant;
import control.Client;
import control.Control.RWord;
import control.Server;

public class Room extends display_Set implements Runnable {
	private static final long serialVersionUID = 1L;

	private RainFeild rainFeild = new RainFeild();
	private JTextField texts = new JTextField(40);

	private JButton start_Button = new JButton();
	private JButton ready_Button = new JButton();
	private JButton enter_Button = new JButton();
	private JButton exit_Button = new JButton();
	
	private boolean playing = false;

//	private Thread gamePlay = new Thread(new gamePlay());
	private Thread wordRain = new Thread(rainFeild);

	public Room() {
		super();
		this.myThread.start();
		
		this.add(rainFeild);
		
		if(control.getRoomState()) {
			this.add(start_Button);
		} else {
			this.add(ready_Button);
		}
		
		this.add(enter_Button);
		this.add(exit_Button);
		this.add(texts);
		this.texts.registerKeyboardAction(this, "insert_Word",
				KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), JComponent.WHEN_FOCUSED);
	}
	
	@Override
	public void draw(Graphics g) {
		g.drawImage(toolkit.getImage(constant.R_I_Route[0]), 0, 0, this);
	}

	@Override
	public void init_Parts() {
		this.rainFeild.setBounds(20, 40, 535, 473);
		
		this.texts.setBounds(210, 541, 305, 35);
		this.texts.setBorder(null);
		try {  
	           InputContext inCtx = texts.getInputContext();
	           Character.Subset[] subset = { Character.UnicodeBlock.HANGUL_SYLLABLES };  
	            	inCtx.setCharacterSubsets( subset );
	    } catch (Exception e) {}

		if(control.getRoomState()) {
			this.start_Button.setBounds(89, 536, 96, 44);
			this.start_Button.setBorderPainted(false);
			this.start_Button.setIcon(new ImageIcon(constant.R_I_Route[2]));
			this.start_Button.setPressedIcon(new ImageIcon(constant.R_I_Route[3]));
			this.start_Button.addActionListener(this);
			this.start_Button.setActionCommand("game_Start");
		} else {
			this.ready_Button.setBounds(89, 536, 96, 44);
			this.ready_Button.setBorderPainted(false);
			this.ready_Button.setIcon(new ImageIcon(constant.R_I_Route[2]));
			this.ready_Button.setPressedIcon(new ImageIcon(constant.R_I_Route[3]));
			this.ready_Button.addActionListener(this);
			this.ready_Button.setActionCommand("game_Start");
		}
		
		this.enter_Button.setBounds(600, 550, 96, 44);
		this.enter_Button.addActionListener(this);
		this.enter_Button.setActionCommand("game_Ready");
		
		this.exit_Button.setBounds(20, 535, 45, 45);
		this.exit_Button.setContentAreaFilled(false);
		this.exit_Button.addActionListener(this);
		this.exit_Button.setActionCommand("room_exit");

		this.rainFeild.requestFocus();
		this.start_Button.requestFocus();
		this.texts.requestFocus();
	}
	
	public void game_Start() {
		if (!playing) {
			this.playing = true;
			this.rainFeild.init_View(display, control);
			this.rainFeild.word_Make();
			this.remove(start_Button);
			this.remove(ready_Button);
			this.display.setVisible(true);
			this.texts.requestFocus();
			this.wordRain.start();
		}
	}
	
	public void insert_Word() {
		control.insert_Word(this.rainFeild, texts.getText());
		display.repaint();
		this.texts.setText(null);
	}
	
	public void room_exit() {
		this.control.room_exit();
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		if(control.getRoomState()) {
			new Server().start();
		} else {
			new Client().start();
		}
	}
	
	class gamePlay implements Runnable {
		@Override
		public void run() {
			// TODO Auto-generated method stub
		}
	}
	
	class RainFeild extends display_Set {
		private static final long serialVersionUID = 1L;
		
		@Override
		public void draw(Graphics g) {
			g.drawImage(toolkit.getImage(constant.R_I_Route[1]), 0, 0, this);
			
			for (RWord word: this.control.getWordList()) {
				g.drawString(word.word, word.X, word.Y);
			}
		}
		
		public void word_Make() {
			this.control.word_Make();
		}

		@Override
		public void run() {
			// TODO Auto-generated method stub
			try {
				while (true) {
					for (RWord word: this.control.getWordList()) {
						word.Y += 2;
					}
					this.repaint();
					Thread.sleep(100);
				}
			} catch (InterruptedException e) {}
		}

		@Override
		public void init_Parts() {}		
	}
}
