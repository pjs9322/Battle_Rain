package display_Set;

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

import display_Sub.Room_Make;
import display_Sub.Room_Make.ActionHandler;

public class Wait extends display_Set {
	private static final long serialVersionUID = 1L;

	private Button make_Room_Button = new Button("방 만들기");
	private Button search_Room_Button = new Button("방 검색");
	private Button logout_Button = new Button("로그아웃");
	
	private Room_Make make;

	public Wait() {
		super();
		this.add(make_Room_Button);
		this.add(search_Room_Button);
		this.add(logout_Button);
	}
	
	@Override
	public void draw(Graphics g) {
		
	}

	@Override
	public void init_Parts() {
		this.make_Room_Button.addActionListener(actionListener);
		this.make_Room_Button.setActionCommand("make_Room");

		this.search_Room_Button.addActionListener(actionListener);
		this.search_Room_Button.setActionCommand("search_Room");
		
		this.logout_Button.addActionListener(actionListener);
		this.logout_Button.setActionCommand("user_logout");
	}
	
	public void make_Room() {
		if (make == null) {
			make = new Room_Make();
			make.setAlwaysOnTop(true);
		} else if (!make.isDisplayable()) {
			make = new Room_Make();
		} else if (!make.isFocused()) {
			make.requestFocus();
		}
		while(true) {
			
		}
	}

	public void search_Room() {
		
	}
	
	public void user_logout() {
		state_code = 1;
	}
	
	
	class Sub_Frame extends JFrame {
		private static final long serialVersionUID = 1L;
		
		public Sub_Frame() {
			this.setSize(250, 120);
			this.setVisible(true);
			this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		}
	  
		private class ActionHandler implements ActionListener {
		@Override
			public void actionPerformed(ActionEvent e) {
				switch (e.getActionCommand()) {
				case "Make":
					
					dispose();
					break;
				case "Cancel":
					dispose();
					break;
				}
			}
		}
	}
}
