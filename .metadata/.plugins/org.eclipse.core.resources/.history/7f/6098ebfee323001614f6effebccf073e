package control;
<<<<<<< HEAD
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Scanner;

public class Server implements Runnable {
   private HashMap<String, DataOutputStream> clients;
   private ServerSocket serverSocket;
   private String myName;

   public static void main(String[] args) {
      new Server().start();
   }

   public Server() {
      clients = new HashMap<String, DataOutputStream>();

      // 여러 스레드에서 접근할 것이므로 동기화
      Collections.synchronizedMap(clients);
   }

   public void start() {
      try {
         Socket socket;

         // 리스너 소켓 생성
         serverSocket = new ServerSocket(7777);
         System.out.println("방이 생성되었습니다.");
         myName = new Scanner(System.in).nextLine();

         // server thread
         Thread myThread = new Thread(this);
         myThread.start();
         // 클라이언트와 연결되면
         while (true) {
            // 통신 소켓을 생성하고 스레드 생성(소켓은 1:1로만 연결된다)
            socket = serverSocket.accept();
            ServerReceiver receiver = new ServerReceiver(socket);
            receiver.start();
         }
      } catch (IOException e) {
         e.printStackTrace();
      }
   }

   @Override
   public void run() {
      // TODO Auto-generated method stub
      while(true) {
         Scanner sc = new Scanner(System.in);
         String msg = "";
         msg = sc.nextLine();
         sendToAll("[" + myName + "]" + msg);
         
//         sendToAll("SCORE1/010");
//         sendToAll("SCORE2/020");
//         sendToAll("SCORE3/030");
         sendToAll("REMOVE/near");
      }
   }


   public void sendToAll(String message) {
      Iterator<String> it = clients.keySet().iterator();

      while (it.hasNext()) {
         try {
            DataOutputStream dos = clients.get(it.next());
            dos.writeUTF(message);
            if(message.contains("REMOVE")) {
               char[] msg = new char[10];
               message.getChars(7, message.length(), msg, 0);
               System.out.println(msg);
               if(msg.toString().equals("near")) {
                  System.out.println("check");
               }
            } else {
               System.out.println(message);
            }
         } catch (Exception e) {
         }
      }
   }


   class ServerReceiver extends Thread {
      Socket socket;
      DataInputStream input;
      DataOutputStream output;

      public ServerReceiver(Socket socket) {
         this.socket = socket;
         try {
            input = new DataInputStream(socket.getInputStream());
            output = new DataOutputStream(socket.getOutputStream());
         } catch (IOException e) {
         }
      }

      @Override
      public void run() {
         String name = "";
         try {
            // 클라이언트가 서버에 접속하면 대화방에 알린다.
            name = input.readUTF();
            sendToAll("#" + name + "[" + socket.getInetAddress() + ":"
                  + socket.getPort() + "]" + "님이 대화방에 접속하였습니다.");

            clients.put(name, output);
            sendToAll(name + "[" + socket.getInetAddress() + ":"
                  + socket.getPort() + "]" + "님이 대화방에 접속하였습니다.");
            sendToAll("현재 " + (clients.size()+1) + "명이 대화방에 접속 중입니다.");

            // 메세지 전송
            while (input != null) {
               sendToAll(input.readUTF());
            }
         } catch (IOException e) {
         } finally {
            // 접속이 종료되면
            clients.remove(name);
            sendToAll("#" + name + "[" + socket.getInetAddress() + ":"
                  + socket.getPort() + "]" + "님이 대화방에서 나갔습니다.");
            sendToAll(name + "[" + socket.getInetAddress() + ":"
                  + socket.getPort() + "]" + "님이 대화방에서 나갔습니다.");
            sendToAll("현재 " + (clients.size()+1) + "명이 대화방에 접속 중입니다.");
         }
      }
   }
=======

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;

public class Server implements Runnable {
	private HashMap<String, DataOutputStream> clients;
	private ServerSocket serverSocket;

	public Server() {
		clients = new HashMap<String, DataOutputStream>();

		// 여러 스레드에서 접근할 것이므로 동기화
		Collections.synchronizedMap(clients);
		// 리스너 소켓 생성
		try {
			serverSocket = new ServerSocket(7777);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void start() {
		try {
			Socket socket;


			// server thread
//			Thread myThread = new Thread(this);
//			myThread.start();
			for(int i = 0; i < 2; i++) {
				// 통신 소켓을 생성하고 스레드 생성(소켓은 1:1로만 연결된다)
				System.out.println("check");
				socket = serverSocket.accept();
				System.out.println("client come");
				ServerReceiver receiver = new ServerReceiver(socket);
				receiver.start();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			// server thread (send message)
		}
	}


	public void sendToAll(String message) {
		Iterator<String> it = clients.keySet().iterator();
		System.out.println(message);
		
		while (it.hasNext()) {
			try {
				DataOutputStream dos = clients.get(it.next());
				dos.writeUTF(message);
				System.out.println(message);
				
			} catch (Exception e) {
			}
		}
	}


	class ServerReceiver extends Thread {
		Socket socket;
		DataInputStream input;
		DataOutputStream output;

		public ServerReceiver(Socket socket) {
			this.socket = socket;
			try {
				input = new DataInputStream(socket.getInputStream());
				output = new DataOutputStream(socket.getOutputStream());
			} catch (IOException e) {
			}
		}

		@Override
		public void run() {
			try {
				// 클라이언트가 서버에 접속하면 대화방에 알린다.
				/*
				name = input.readUTF();
				sendToAll("#" + name + "[" + socket.getInetAddress() + ":"
						+ socket.getPort() + "]" + "님이 대화방에 접속하였습니다.");

				
				sendToAll(name + "[" + socket.getInetAddress() + ":"
						+ socket.getPort() + "]" + "님이 대화방에 접속하였습니다.");
				sendToAll("현재 " + (clients.size()+1) + "명이 대화방에 접속 중입니다.");
				*/
				
				clients.put("name", output); // name 은 클아이언트의 네임
				sendToAll("Client come");

				// 메세지 전송
				while (input != null) {
					sendToAll(input.readUTF());
				}
			} catch (IOException e) {
			} finally {
				// 접속이 종료되면
				/*
				clients.remove(name);
				sendToAll("#" + name + "[" + socket.getInetAddress() + ":"
						+ socket.getPort() + "]" + "님이 대화방에서 나갔습니다.");
				sendToAll(name + "[" + socket.getInetAddress() + ":"
						+ socket.getPort() + "]" + "님이 대화방에서 나갔습니다.");
				sendToAll("현재 " + (clients.size()+1) + "명이 대화방에 접속 중입니다.");
				*/
				sendToAll("Client out");
			}
		}
	}
>>>>>>> refs/remotes/origin/master

}